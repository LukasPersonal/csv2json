#!/usr/bin/env bash
################################################################################
################################################################################
####### convert csv document into json object ##################################
################################################################################
################################################################################

# LEGEND:
# This script is used by the gh command line to help convert a csv file
# into a json object.
# You can then choose to output the json object to screen, or to a file.

#
# PREREQS:
# You need to have the following to run this script successfully:
# - .csv file to parse data
# - jq installed on the machine running the query
#
# NOTES:
# Input file should be in the format:
# standard csv format

################################################################################
#### Function PrintUsage #######################################################
PrintUsage()
{
  cat <<EOM
Usage: gh csv2json [options]
Options:
    -h, --help                    : Show script help
    -d, --debug                   : Enable Debug logging
    -f, --file                    : Input file name
    -o, --output                  : Output file name, defaults to stdout
Description:
csv2json is a script that will convert a csv file into a json object.
Example:
  gh csv2json --file possum_statistics.csv --output possum_statistics.json
EOM
  exit 0
}
####################################
# Read in the parameters if passed #
####################################
PARAMS=""
while (( "$#" )); do
  case "$1" in
    -h|--help)
      PrintUsage;
      ;;
    -d|--debug)
      DEBUG=true
      shift
      ;;
    -f|--file)
      INPUT_FILE=$2
      shift 2
      ;;
    -o|--output)
      OUTPUT_FILE=$2
      shift 2
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
  PARAMS="${PARAMS} $1"
  shift
  ;;
  esac
done

##################################################
# Set positional arguments in their proper place #
##################################################
eval set -- "${PARAMS}"

############
# Defaults #
############
EPOCH_TIME=$(date +%s)                           # Set to current epoch time
LOG_DIR="$(pwd)"                                 # Set to default log directory
LOG_FILE="${LOG_DIR}/csv2json-${EPOCH_TIME}.log" # Set to default log file name
SECONDS=0                                        # Set to 0 for timing

################################################################################
############################ FUNCTIONS #########################################
################################################################################
################################################################################
################################################################################
#### Function DebugJQ ##########################################################
DebugJQ() {
  # If Debug is on, print it out...
  if [[ ${DEBUG} == true ]]; then
    echo "$1" | jq '.'
  fi
}
################################################################################
#### Function Debug ############################################################
Debug() {
  # If Debug is on, print it out...
  if [[ ${DEBUG} == true ]]; then
    echo "$1"
    # Write to log file
    echo "$1" >> "${LOG_FILE}"
  fi
}
################################################################################
#### Function ValidateJQ #######################################################
ValidateJQ() {
  # Need to validate the machine has jq installed as we use it to do the parsing
  # of all the json returns from GitHub

  if ! jq --version &>/dev/null
  then
    echo "Failed to find jq in the path!"
    echo "If this is a Mac, run command: brew install jq"
    echo "If this is Debian, run command: sudo apt install jq"
    echo "If this is Centos, run command: yum install jq"
    echo "Once installed, please run this script again."
    exit 1
  fi
}
################################################################################
#### Function Header ###########################################################
Header() {
  echo ""
  echo "######################################################"
  echo "######################################################"
  echo "############# csv2json conversion tool ###############"
  echo "######################################################"
  echo "######################################################"
  echo ""
  # echo info if debug is true
  if [[ ${DEBUG} == true ]]; then
    echo "Logs will be written to:[${LOG_FILE}]"
  fi
  # echo output file if it is set
  if [[ "${OUTPUT_FILE}" != "" ]]; then
    echo "Output will be written to:[${OUTPUT_FILE}]"
  else
    echo "Output will be written to:[stdout]"
  fi
  # Print warning information
  echo ""
  echo "Warning: This script will overwrite any existing file with the same name as the output file."
  echo "This script could possibly take a while to run, depending on the size of the csv file."
  echo "This script will not validate the csv file, so please ensure it is in the correct format."
  echo "This script could take up a large section of memory if you do NOT choose to output to a file as it will hold the entire json object in memory."
  echo ""

  # Debug info
  Debug "---- DEBUG ----"
  Debug "Input File:[${INPUT_FILE}]"
  Debug "Output File:[${OUTPUT_FILE}]"
  Debug "---- DEBUG ----"
}
################################################################################
#### Function Footer ###########################################################
Footer() {
  #######################################
  # Basic footer information and totals #
  #######################################
  echo ""
  echo "######################################################"
  echo "The script has completed"
  echo "######################################################"
  # Get the current epoch time
  CURRENT_EPOCH_TIME=$(date +%s)
  # Get the difference between the start and end time
  SECONDS=$((CURRENT_EPOCH_TIME - EPOCH_TIME))
  # Print out the total time it took to run the script
  echo "Total time to run script: [${SECONDS}] seconds"
  # print the output file if exists
  if [[ "${OUTPUT_FILE}" != "" ]]; then
    echo "Output file:[${OUTPUT_FILE}]"
  fi
  echo ""
}
################################################################################
#### Function ParseCSV #########################################################
ParseCSV() {
  # Read the first line of the csv file and use it as the header
  # This will be used to create the json object
  # Get all headers in an array as to pull from them in same order
  HEADERS=$(head -n 1 "${INPUT_FILE}")

  # Get a count of the number of rows in the csv file
  ROW_COUNT=$(wc -l < "${INPUT_FILE}" | xargs)
  LINE_COUNT=0
  # Create the json object
  # Read the csv file line by line and create the json object
  # The first line is the header, so we skip it
  while IFS= read -r LINE
  do
    # Increment the row count
    ((LINE_COUNT++))
    # Output the line to the log file
    echo "Parsing Line: [${LINE_COUNT}] of [${ROW_COUNT}]"
    Debug "Parsing Line: [${LINE_COUNT}] of [${ROW_COUNT}]"
    Debug "${LINE}"
    # Skip the first line as it is the header
    if [[ "${LINE}" == "${HEADERS}" ]]; then
      #Debug "Skipping header line"
      continue
    fi
    # Need to add placeholder for empty values
    # This is because the csv file has empty values, but the json object
    # does not allow empty values
    LINE=$(echo "${LINE}" | sed 's/,,/,null,/g')
    Debug "Cleaned Line:[${LINE}]"

    # Create array of values from the line seperated by comma
    LINE_DATA=($(echo "${LINE}" | tr ',' ' '))
    Debug "Line Data:[${LINE_DATA[*]}]"
    
    # Loop through the line data and create the json object
    for DATA_POINT in "${!LINE_DATA[@]}"; do
      # Get the header for the current index
      HEADER=$(echo "${HEADERS}" | cut -d',' -f$((DATA_POINT+1)))
      # Get the value for the current index
      VALUE=$(echo "${LINE_DATA[${DATA_POINT}]}" | sed 's/"/\\"/g')
      # Create the json object
      if [[ "${VALUE}" == "null" ]]; then
        # If the value is null, then we skip it
        Debug "- Skipping [null] value for header:[${HEADER}]"
        continue
      elif [[ "${DATA_POINT}" == "0" ]]; then
        JSON_OBJECT="${JSON_OBJECT},{\"${HEADER}\":\"${VALUE}\""
      else
        JSON_OBJECT="${JSON_OBJECT},\"${HEADER}\":\"${VALUE}\""
      fi
    done
    
    # Close the json object
    JSON_OBJECT="${JSON_OBJECT}}"
  done < "${INPUT_FILE}"

  # Need to clean up the file
  # Remove the first comma and replace with a bracket
  JSON_OBJECT=$(echo "${JSON_OBJECT}" | sed 's/,/[/')
  # Add a closing bracket to the end of the file
  JSON_OBJECT="${JSON_OBJECT}]"
  # Use JQ to format the json object
  JSON_OBJECT=$(echo "${JSON_OBJECT}" | jq '.')
  # Print the json object to the screen or to the output file
  if [[ "${OUTPUT_FILE}" == "" ]]; then
    echo "${JSON_OBJECT}"
  else
    echo "${JSON_OBJECT}" > "${OUTPUT_FILE}"
  fi
}
################################################################################
############################## MAIN ############################################
################################################################################

##########
# Header #
##########
Header

#########################
# Validate JQ installed #
#########################
ValidateJQ

#########################################
# parse the CSV file into a json object #
#########################################
ParseCSV

##########
# Footer #
##########
Footer